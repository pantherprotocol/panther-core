{
  "address": "0x365882023e894C09F6bcC3F7c2fbb7fFF5b2512e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardMaster",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakeMsgSender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "StakeMsgRelayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FX_CHILD",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_MASTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_MSG_SENDER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "content",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdead193c378074d651175d2537de64a9d648d949d64442f4b071fec0e7e3901b",
  "receipt": {
    "to": null,
    "from": "0xf0886ac6B2E9A2A75C9537EAF1A3aa8398FB10e8",
    "contractAddress": "0x365882023e894C09F6bcC3F7c2fbb7fFF5b2512e",
    "transactionIndex": 65,
    "gasUsed": "483277",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000008000000008000000000000000000000000000000000000000004000000000000000800000000000000000000100020000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000000000000000000000002000000000000000000020100000",
    "blockHash": "0x1ced424d3e81cfb9c1ada4bd5b09d2026e3c1fb3c12ba783e89163ffee585345",
    "transactionHash": "0xdead193c378074d651175d2537de64a9d648d949d64442f4b071fec0e7e3901b",
    "logs": [
      {
        "transactionIndex": 65,
        "blockNumber": 36301437,
        "transactionHash": "0xdead193c378074d651175d2537de64a9d648d949d64442f4b071fec0e7e3901b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f0886ac6b2e9a2a75c9537eaf1a3aa8398fb10e8",
          "0x000000000000000000000000794e44d1334a56fea7f4df12633b88820d0c5888"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000338e4d86be0d550000000000000000000000000000000000000000000000000b6577f77101d9070000000000000000000000000000000000000000000001a82872fc404450e3530000000000000000000000000000000000000000000000000b31e9a9ea43cbb20000000000000000000000000000000000000000000001a828a68a8dcb0ef0a8",
        "logIndex": 297,
        "blockHash": "0x1ced424d3e81cfb9c1ada4bd5b09d2026e3c1fb3c12ba783e89163ffee585345"
      }
    ],
    "blockNumber": 36301437,
    "cumulativeGasUsed": "9987110",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x09220DD0c342Ee92C333FAa6879984D63B4dff03",
    "0xFED599513aB078Edea7Cf46574154f92b0B9FCAB",
    "0x8397259c983751DAf40400790063935a11afa28a"
  ],
  "numDeployments": 1,
  "solcInputHash": "49300367bcb47864d5852738a8da403e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardMaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeMsgSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"StakeMsgRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FX_CHILD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_MASTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_MSG_SENDER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_fxChild\":\"Address of the `FxChild` (Bridge) contract on Polygon/Mumbai\",\"_rewardMaster\":\"Address of the RewardMaster contract on the Polygon/Mumbai\",\"_stakeMsgSender\":\"Address of the AdvancedStakeRewardAdviserAndMsgSender on the mainnet/Goerli\"}},\"processMessageFromRoot(uint256,address,bytes)\":{\"details\":\"Sanitizes, decodes and relay to the RewardMaster the STAKE action message. PoS bridge validators call this method via the `FxChild` contract each time a new message is posted to the bridge on the mainnet/Goerli\",\"params\":{\"content\":\"Message data\",\"rootMessageSender\":\"Address on the mainnet/Goerli that sent the message\"}}},\"stateVariables\":{\"FX_CHILD\":{\"details\":\"`FxChild` is the contract of the \\\"Fx-Portal\\\" on the Polygon/Mumbai\"},\"STAKE_MSG_SENDER\":{\"details\":\"It sends messages over the PoS bridge to this contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"FX_CHILD()\":{\"notice\":\"Address of the `FxChild` contract on the Polygon/Mumbai network\"},\"REWARD_MASTER()\":{\"notice\":\"Address of the RewardMaster contract on the Polygon/Mumbai\"},\"STAKE_MSG_SENDER()\":{\"notice\":\"Address of the AdvancedStakeRewardAdviserAndMsgSender on the mainnet/Goerli\"},\"nonce()\":{\"notice\":\"Message nonce (i.e. sequential number of the latest message)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/AdvancedStakeActionMsgRelayer.sol\":\"AdvancedStakeActionMsgRelayer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/staking/AdvancedStakeActionMsgRelayer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity 0.8.16;\\n\\nimport \\\"./actions/AdvancedStakingBridgedDataCoder.sol\\\";\\nimport \\\"./interfaces/IActionMsgReceiver.sol\\\";\\nimport \\\"./interfaces/IFxMessageProcessor.sol\\\";\\n\\n/***\\n * @title AdvancedStakeActionMsgRelayer\\n * @notice It re-translates messages on new \\\"advanced\\\" stakes created on the mainnet (or Goerli)\\n * network to the `RewardMaster` contract running on the Polygon (or Mumbai) network.\\n * @dev It is assumed to run on the Polygon (or Mumbai) network.\\n * Like the `Staking` contract, this contract acts as the \\\"Action Oracle\\\" for the RewardMaster, and\\n * this contract must be registered as the oracle with the latest.\\n * It receives STAKE action messages (on new \\\"advanced\\\" stakes created) from the `FxChild` contract\\n * (a contract of the \\\"Fx-Portal\\\" PoS bridge), sanitizes and relays messages to the RewardMaster on\\n * the Polygon (or Mumbai).\\n * The `AdvancedStakeRewardAdviserAndMsgSender` contract, a counterpart to this contract that runs\\n * on the mainnet (or Goerli) network, sends these messages to this contract over the bridge.\\n */\\ncontract AdvancedStakeActionMsgRelayer is\\n    AdvancedStakingBridgedDataCoder,\\n    IFxMessageProcessor\\n{\\n    event StakeMsgRelayed(uint256 _nonce, bytes data);\\n\\n    // solhint-disable var-name-mixedcase\\n\\n    /// @notice Address of the `FxChild` contract on the Polygon/Mumbai network\\n    /// @dev `FxChild` is the contract of the \\\"Fx-Portal\\\" on the Polygon/Mumbai\\n    address public immutable FX_CHILD;\\n\\n    /// @notice Address of the RewardMaster contract on the Polygon/Mumbai\\n    address public immutable REWARD_MASTER;\\n\\n    /// @notice Address of the AdvancedStakeRewardAdviserAndMsgSender on the mainnet/Goerli\\n    /// @dev It sends messages over the PoS bridge to this contract\\n    address public immutable STAKE_MSG_SENDER;\\n\\n    // solhint-enable var-name-mixedcase\\n\\n    /// @notice Message nonce (i.e. sequential number of the latest message)\\n    uint256 public nonce;\\n\\n    /// @param _rewardMaster Address of the RewardMaster contract on the Polygon/Mumbai\\n    /// @param _stakeMsgSender Address of the AdvancedStakeRewardAdviserAndMsgSender on the mainnet/Goerli\\n    /// @param _fxChild Address of the `FxChild` (Bridge) contract on Polygon/Mumbai\\n    constructor(\\n        // slither-disable-next-line similar-names\\n        address _rewardMaster,\\n        address _stakeMsgSender,\\n        address _fxChild\\n    ) {\\n        require(\\n            _fxChild != address(0) &&\\n                _stakeMsgSender != address(0) &&\\n                _rewardMaster != address(0),\\n            \\\"AMR:E01\\\"\\n        );\\n\\n        FX_CHILD = _fxChild;\\n        REWARD_MASTER = _rewardMaster;\\n        STAKE_MSG_SENDER = _stakeMsgSender;\\n    }\\n\\n    /// @dev Sanitizes, decodes and relay to the RewardMaster the STAKE action message.\\n    /// PoS bridge validators call this method via the `FxChild` contract each time\\n    /// a new message is posted to the bridge on the mainnet/Goerli\\n    /// @param rootMessageSender Address on the mainnet/Goerli that sent the message\\n    /// @param content Message data\\n    function processMessageFromRoot(\\n        uint256, // stateId (Polygon PoS Bridge state sync ID, unused)\\n        address rootMessageSender,\\n        bytes calldata content\\n    ) external override {\\n        require(msg.sender == FX_CHILD, \\\"AMR:INVALID_CALLER\\\");\\n        require(rootMessageSender == STAKE_MSG_SENDER, \\\"AMR:INVALID_SENDER\\\");\\n\\n        (\\n            uint256 _nonce,\\n            bytes4 action,\\n            bytes memory message\\n        ) = _decodeBridgedData(content);\\n\\n        // Protection against replay attacks/errors. It's supposed that:\\n        // - failed `.onAction` shall not stop further messages bridging\\n        // - nonce is expected never be large enough to overflow.\\n        require(_nonce > nonce, \\\"AMR:INVALID_NONCE\\\");\\n        nonce = _nonce;\\n\\n        // trusted contract call - no reentrancy guard needed\\n        // slither-disable-next-line reentrancy-benign,reentrancy-events\\n        IActionMsgReceiver(REWARD_MASTER).onAction(action, message);\\n\\n        emit StakeMsgRelayed(_nonce, content);\\n    }\\n}\\n\",\"keccak256\":\"0x50bf4e370dec74fbe200c06c43f921ee491e72d519a062f2d889634231a0ba72\",\"license\":\"BUSL-1.1\"},\"contracts/staking/actions/AdvancedStakingBridgedDataCoder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\npragma solidity ^0.8.16;\\n\\n/***\\n * @title AdvancedStakingBridgedDataDecoder\\n * @dev It encode (pack) and decodes (unpack) messages for bridging them between networks\\n */\\nabstract contract AdvancedStakingBridgedDataCoder {\\n    function _encodeBridgedData(\\n        uint24 _nonce,\\n        bytes4 action,\\n        bytes memory message\\n    ) internal pure returns (bytes memory content) {\\n        content = abi.encodePacked(_nonce, action, message);\\n    }\\n\\n    // For efficiency we use \\\"packed\\\" (rather than \\\"ABI\\\") encoding.\\n    // It results in shorter data, but requires custom unpack function.\\n    function _decodeBridgedData(bytes memory content)\\n        internal\\n        pure\\n        returns (\\n            uint256 _nonce,\\n            bytes4 action,\\n            bytes memory message\\n        )\\n    {\\n        require(content.length >= 7, \\\"ABD:WRONG_LENGTH\\\");\\n\\n        _nonce =\\n            (uint256(uint8(content[0])) << 16) |\\n            (uint256(uint8(content[1])) << 8) |\\n            uint256(uint8(content[2]));\\n\\n        action = bytes4(\\n            uint32(\\n                (uint256(uint8(content[3])) << 24) |\\n                    (uint256(uint8(content[4])) << 16) |\\n                    (uint256(uint8(content[5])) << 8) |\\n                    uint256(uint8(content[6]))\\n            )\\n        );\\n\\n        uint256 curPos = 7;\\n        uint256 msgLength = content.length - curPos;\\n        message = new bytes(msgLength);\\n        if (msgLength > 0) {\\n            uint256 i = 0;\\n            while (i < msgLength) {\\n                message[i++] = content[curPos++];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfcda4c1aa70210a35a8693958b0ab51b9da4dfe32121ac6e6fb3330dfeaaa6f9\",\"license\":\"BUSL-1.1\"},\"contracts/staking/interfaces/IActionMsgReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\ninterface IActionMsgReceiver {\\n    function onAction(bytes4 action, bytes memory message) external;\\n}\\n\",\"keccak256\":\"0xe1607584324bdd12416ec4dff14e2f4f871b33f03f09a574d60193e6dfd6989e\",\"license\":\"MIT\"},\"contracts/staking/interfaces/IFxMessageProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/***\\n * @dev A receiver on the Polygon (or Mumbai) network of a message sent over the\\n * \\\"Fx-Portal\\\" must implement this interface.\\n * The \\\"Fx-Portal\\\" is the PoS bridge run by the Polygon team.\\n * See https://docs.polygon.technology/docs/develop/l1-l2-communication/fx-portal\\n */\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xef2f4ca5a0d36f4e1d9b13d065c304595398ec685e78f33325dffca63781bb40\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161091238038061091283398101604081905261002f916100d6565b6001600160a01b0381161580159061004f57506001600160a01b03821615155b801561006357506001600160a01b03831615155b61009d5760405162461bcd60e51b8152602060048201526007602482015266414d523a45303160c81b604482015260640160405180910390fd5b6001600160a01b0390811660805291821660a0521660c052610119565b80516001600160a01b03811681146100d157600080fd5b919050565b6000806000606084860312156100eb57600080fd5b6100f4846100ba565b9250610102602085016100ba565b9150610110604085016100ba565b90509250925092565b60805160a05160c0516107b861015a6000396000818160b501526101a9015260008181607101526102df01526000818160dc015261013501526107b86000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806382f9deb51161005057806382f9deb5146100d75780639a7c4b71146100fe578063affed0e01461011357600080fd5b8063576eadd21461006c5780636d552916146100b0575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6100937f000000000000000000000000000000000000000000000000000000000000000081565b61011161010c36600461060d565b61012a565b005b61011c60005481565b6040519081526020016100a7565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101a75760405162461bcd60e51b815260206004820152601260248201527f414d523a494e56414c49445f43414c4c4552000000000000000000000000000060448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146102285760405162461bcd60e51b815260206004820152601260248201527f414d523a494e56414c49445f53454e4445520000000000000000000000000000604482015260640161019e565b600080600061026c85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061038c92505050565b92509250925060005483116102c35760405162461bcd60e51b815260206004820152601160248201527f414d523a494e56414c49445f4e4f4e4345000000000000000000000000000000604482015260640161019e565b6000839055604051630dc3282360e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631b8650469061031690859085906004016106a2565b600060405180830381600087803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b505050507f1275898ec013c1c96f35dd542dc0fef5ae5fbb5e3c07d7d518cd87972537f67c83868660405161037b93929190610701565b60405180910390a150505050505050565b60008060606007845110156103e35760405162461bcd60e51b815260206004820152601060248201527f4142443a57524f4e475f4c454e47544800000000000000000000000000000000604482015260640161019e565b836002815181106103f6576103f6610737565b602001015160f81c60f81b60f81c60ff1660088560018151811061041c5761041c610737565b602001015160f81c60f81b60f81c60ff16901b60108660008151811061044457610444610737565b602001015160f81c60f81b60f81c60ff16901b171792508360068151811061046e5761046e610737565b602001015160f81c60f81b60f81c60ff1660088560058151811061049457610494610737565b602001015160f81c60f81b60f81c60ff16901b6010866004815181106104bc576104bc610737565b602001015160f81c60f81b60f81c60ff16901b6018876003815181106104e4576104e4610737565b602001015160f81c60f81b60f81c60ff16901b17171760e01b915060006007905060008186516105149190610763565b90508067ffffffffffffffff81111561052f5761052f61077c565b6040519080825280601f01601f191660200182016040528015610559576020820181803683370190505b50925080156106045760005b8181101561060257868361057881610792565b94508151811061058a5761058a610737565b01602001517fff000000000000000000000000000000000000000000000000000000000000001684826105bc81610792565b9350815181106105ce576105ce610737565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610565565b505b50509193909250565b6000806000806060858703121561062357600080fd5b8435935060208501356001600160a01b038116811461064157600080fd5b9250604085013567ffffffffffffffff8082111561065e57600080fd5b818701915087601f83011261067257600080fd5b81358181111561068157600080fd5b88602082850101111561069357600080fd5b95989497505060200194505050565b63ffffffff60e01b8316815260006020604081840152835180604085015260005b818110156106df578581018301518582016060015282016106c3565b506000606082860101526060601f19601f830116850101925050509392505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156107765761077661074d565b92915050565b634e487b7160e01b600052604160045260246000fd5b6000600182016107a4576107a461074d565b506001019056fea164736f6c6343000810000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c806382f9deb51161005057806382f9deb5146100d75780639a7c4b71146100fe578063affed0e01461011357600080fd5b8063576eadd21461006c5780636d552916146100b0575b600080fd5b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100937f000000000000000000000000000000000000000000000000000000000000000081565b6100937f000000000000000000000000000000000000000000000000000000000000000081565b61011161010c36600461060d565b61012a565b005b61011c60005481565b6040519081526020016100a7565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101a75760405162461bcd60e51b815260206004820152601260248201527f414d523a494e56414c49445f43414c4c4552000000000000000000000000000060448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146102285760405162461bcd60e51b815260206004820152601260248201527f414d523a494e56414c49445f53454e4445520000000000000000000000000000604482015260640161019e565b600080600061026c85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061038c92505050565b92509250925060005483116102c35760405162461bcd60e51b815260206004820152601160248201527f414d523a494e56414c49445f4e4f4e4345000000000000000000000000000000604482015260640161019e565b6000839055604051630dc3282360e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631b8650469061031690859085906004016106a2565b600060405180830381600087803b15801561033057600080fd5b505af1158015610344573d6000803e3d6000fd5b505050507f1275898ec013c1c96f35dd542dc0fef5ae5fbb5e3c07d7d518cd87972537f67c83868660405161037b93929190610701565b60405180910390a150505050505050565b60008060606007845110156103e35760405162461bcd60e51b815260206004820152601060248201527f4142443a57524f4e475f4c454e47544800000000000000000000000000000000604482015260640161019e565b836002815181106103f6576103f6610737565b602001015160f81c60f81b60f81c60ff1660088560018151811061041c5761041c610737565b602001015160f81c60f81b60f81c60ff16901b60108660008151811061044457610444610737565b602001015160f81c60f81b60f81c60ff16901b171792508360068151811061046e5761046e610737565b602001015160f81c60f81b60f81c60ff1660088560058151811061049457610494610737565b602001015160f81c60f81b60f81c60ff16901b6010866004815181106104bc576104bc610737565b602001015160f81c60f81b60f81c60ff16901b6018876003815181106104e4576104e4610737565b602001015160f81c60f81b60f81c60ff16901b17171760e01b915060006007905060008186516105149190610763565b90508067ffffffffffffffff81111561052f5761052f61077c565b6040519080825280601f01601f191660200182016040528015610559576020820181803683370190505b50925080156106045760005b8181101561060257868361057881610792565b94508151811061058a5761058a610737565b01602001517fff000000000000000000000000000000000000000000000000000000000000001684826105bc81610792565b9350815181106105ce576105ce610737565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610565565b505b50509193909250565b6000806000806060858703121561062357600080fd5b8435935060208501356001600160a01b038116811461064157600080fd5b9250604085013567ffffffffffffffff8082111561065e57600080fd5b818701915087601f83011261067257600080fd5b81358181111561068157600080fd5b88602082850101111561069357600080fd5b95989497505060200194505050565b63ffffffff60e01b8316815260006020604081840152835180604085015260005b818110156106df578581018301518582016060015282016106c3565b506000606082860101526060601f19601f830116850101925050509392505050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156107765761077661074d565b92915050565b634e487b7160e01b600052604160045260246000fd5b6000600182016107a4576107a461074d565b506001019056fea164736f6c6343000810000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_fxChild": "Address of the `FxChild` (Bridge) contract on Polygon/Mumbai",
          "_rewardMaster": "Address of the RewardMaster contract on the Polygon/Mumbai",
          "_stakeMsgSender": "Address of the AdvancedStakeRewardAdviserAndMsgSender on the mainnet/Goerli"
        }
      },
      "processMessageFromRoot(uint256,address,bytes)": {
        "details": "Sanitizes, decodes and relay to the RewardMaster the STAKE action message. PoS bridge validators call this method via the `FxChild` contract each time a new message is posted to the bridge on the mainnet/Goerli",
        "params": {
          "content": "Message data",
          "rootMessageSender": "Address on the mainnet/Goerli that sent the message"
        }
      }
    },
    "stateVariables": {
      "FX_CHILD": {
        "details": "`FxChild` is the contract of the \"Fx-Portal\" on the Polygon/Mumbai"
      },
      "STAKE_MSG_SENDER": {
        "details": "It sends messages over the PoS bridge to this contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "FX_CHILD()": {
        "notice": "Address of the `FxChild` contract on the Polygon/Mumbai network"
      },
      "REWARD_MASTER()": {
        "notice": "Address of the RewardMaster contract on the Polygon/Mumbai"
      },
      "STAKE_MSG_SENDER()": {
        "notice": "Address of the AdvancedStakeRewardAdviserAndMsgSender on the mainnet/Goerli"
      },
      "nonce()": {
        "notice": "Message nonce (i.e. sequential number of the latest message)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9789,
        "contract": "contracts/staking/AdvancedStakeActionMsgRelayer.sol:AdvancedStakeActionMsgRelayer",
        "label": "nonce",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}