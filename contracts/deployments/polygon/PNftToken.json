{
  "address": "0xE5da4955cBC480Eb9Bf9534def229F9D8339eE6d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "approvee",
          "type": "address"
        }
      ],
      "name": "ApprovedForAllUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "ContractUriUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "relayerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        }
      ],
      "name": "MetaTransactionExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "MinterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "TokenUriUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ERC712_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OWNER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvedForAll",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "functionSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "sigR",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "sigS",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "sigV",
          "type": "uint8"
        }
      ],
      "name": "executeMetaTransaction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeperator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "grantOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approvee",
          "type": "address"
        }
      ],
      "name": "setApprovedForAllOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseTokenURI",
          "type": "string"
        }
      ],
      "name": "setBaseTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb9281110fc3cf473465c8fff0894037449c4e1045387ec900d1464c73d58236",
  "receipt": {
    "to": null,
    "from": "0xf0886ac6B2E9A2A75C9537EAF1A3aa8398FB10e8",
    "contractAddress": "0xE5da4955cBC480Eb9Bf9534def229F9D8339eE6d",
    "transactionIndex": 58,
    "gasUsed": "2213759",
    "logsBloom": "0x
    "blockHash": "0xf094ab6ef5722ae31b8887cf5e6ab330ddb1424a483effe6e7ca2a138f5d19f8",
    "transactionHash": "0xbb9281110fc3cf473465c8fff0894037449c4e1045387ec900d1464c73d58236",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 36301270,
        "transactionHash": "0xbb9281110fc3cf473465c8fff0894037449c4e1045387ec900d1464c73d58236",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f0886ac6b2e9a2a75c9537eaf1a3aa8398fb10e8",
          "0x0000000000000000000000009ead03f7136fc6b4bdb0780b00a1c14ae5a8b6d0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000101c09b12687eec0000000000000000000000000000000000000000000000000e215cbf1af6cce6000000000000000000000000000000000000000000007d193002cce27f486cac0000000000000000000000000000000000000000000000000d1f9c24088e4dfa000000000000000000000000000000000000000000007d1931048d7d91b0eb98",
        "logIndex": 179,
        "blockHash": "0xf094ab6ef5722ae31b8887cf5e6ab330ddb1424a483effe6e7ca2a138f5d19f8"
      }
    ],
    "blockNumber": 36301270,
    "cumulativeGasUsed": "9411701",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x208Fb9169BBec5915722e0AfF8B0eeEdaBf8a6f0",
    "Panther NFT",
    "PNFT"
  ],
  "numDeployments": 1,
  "solcInputHash": "49300367bcb47864d5852738a8da403e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approvee\",\"type\":\"address\"}],\"name\":\"ApprovedForAllUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"ContractUriUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"relayerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"}],\"name\":\"MetaTransactionExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"MinterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"TokenUriUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC712_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvedForAll\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"functionSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"sigR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"sigS\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"sigV\",\"type\":\"uint8\"}],\"name\":\"executeMetaTransaction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeperator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"grantOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approvee\",\"type\":\"address\"}],\"name\":\"setApprovedForAllOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"If called by the \\\"minter\\\", it mints and grants one NFT to the address given. The `AdvancedStakeRewardController` is supposed to be the minter and call it to reward stakers with $PNFTs. An immutable \\\"owner\\\" may update the minter and set the metadata (URIs) once. Inspired and borrowed by/from the OpenSea's ERC721Tradable contract. https://github.com/ProjectOpenSea/opensea-creatures/blob/master/contracts/ERC721Tradable.sol\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"grantOneToken(address)\":{\"details\":\"Mints a token to an address with a tokenURI.\",\"params\":{\"_to\":\"address of the future owner of the token\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setApprovedForAllOperator(address)\":{\"details\":\"Sets the address of the \\\"operator\\\" approved for all transactions. May be set by the owner only.\",\"params\":{\"approvee\":\"Approved address. It may be a Panther's contract or OpenSea's ERC721 Proxy Registry, which is at matic:0x58807baD0B376efc12F5AD86aAc70E78ed67deaE (mumbai:0xff7Ca10aF37178BdD056628eF42fD7F799fAc77c)\"}},\"setBaseTokenURI(string)\":{\"details\":\"Sets the URI of the token. it can be called only once by the owner\",\"params\":{\"_baseTokenURI\":\"URI of the token\"}},\"setContractURI(string)\":{\"details\":\"Sets the URI of the contract. it can be called only once by the owner\",\"params\":{\"_contractURI\":\"URI of the contract\"}},\"setMinter(address)\":{\"details\":\"Sets the minter address\",\"params\":{\"_minter\":\"The address that can mint token\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"totalSupply()\":{\"details\":\"Returns the total tokens minted so far. 1 is always subtracted from the Counter since it tracks the next available tokenId.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"PNftToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OWNER()\":{\"notice\":\"The owner who has privileged rights\"},\"approvedForAll()\":{\"notice\":\"Operator (or user's Proxy Register) approved for all transactions\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist a Panther authorized account or user's OpenSea proxy accounts to enable gas-less transactions/listings.\"}},\"notice\":\"Panther NFT (PNFT) token on Polygon.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/PNftToken.sol\":\"PNftToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/common/ImmutableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: Copyright 2021-22 Panther Ventures Limited Gibraltar\\n// slither-disable-next-line solc-version\\npragma solidity ^0.8.4;\\n\\n/// @title Staking\\nabstract contract ImmutableOwnable {\\n    /// @notice The owner who has privileged rights\\n    // solhint-disable-next-line var-name-mixedcase\\n    address public immutable OWNER;\\n\\n    /// @dev Throws if called by any account other than the {OWNER}.\\n    modifier onlyOwner() {\\n        require(OWNER == msg.sender, \\\"ImmOwn: unauthorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _owner) {\\n        require(_owner != address(0), \\\"ImmOwn: zero owner address\\\");\\n        OWNER = _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x50d471ce507ca3796ff407b52d0dffead3b4eb6c0f0afea9350f712f9c5f1416\",\"license\":\"MIT\"},\"contracts/staking/PNftToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./pNftToken/NativeMetaTransaction.sol\\\";\\nimport \\\"./pNftToken/ContentMixin.sol\\\";\\nimport \\\"../common/ImmutableOwnable.sol\\\";\\nimport \\\"./interfaces/INftGrantor.sol\\\";\\n\\n/**\\n * @title PNftToken\\n * @notice Panther NFT (PNFT) token on Polygon.\\n * @dev If called by the \\\"minter\\\", it mints and grants one NFT to the address\\n * given. The `AdvancedStakeRewardController` is supposed to be the minter and\\n * call it to reward stakers with $PNFTs.\\n * An immutable \\\"owner\\\" may update the minter and set the metadata (URIs) once.\\n * Inspired and borrowed by/from the OpenSea's ERC721Tradable contract.\\n * https://github.com/ProjectOpenSea/opensea-creatures/blob/master/contracts/ERC721Tradable.sol\\n */\\ncontract PNftToken is\\n    ImmutableOwnable,\\n    ERC721,\\n    ContextMixin,\\n    NativeMetaTransaction,\\n    INftGrantor\\n{\\n    using Counters for Counters.Counter;\\n\\n    /**\\n     * We rely on the OZ Counter util to keep track of the next available ID.\\n     * We track the nextTokenId instead of the currentTokenId to save users on gas costs.\\n     */\\n    Counters.Counter private _nextTokenId;\\n\\n    /// @notice Operator (or user's Proxy Register) approved for all transactions\\n    address public approvedForAll;\\n    address public minter;\\n\\n    string public contractURI;\\n    string public baseTokenURI;\\n\\n    event MinterUpdated(address _minter);\\n    event TokenUriUpdated(string _tokenURI);\\n    event ContractUriUpdated(string _contractURI);\\n    event ApprovedForAllUpdated(address approvee);\\n\\n    constructor(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC721(_name, _symbol) ImmutableOwnable(_owner) {\\n        // nextTokenId is initialized to 1, since starting at 0 leads to higher gas cost for the first minter\\n        _nextTokenId.increment();\\n        _initializeEIP712(_name);\\n    }\\n\\n    /**\\n     * @dev Returns the total tokens minted so far.\\n     * 1 is always subtracted from the Counter since it tracks the next available tokenId.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _nextTokenId.current() - 1;\\n    }\\n\\n    function tokenURI(uint256 _tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(abi.encodePacked(baseTokenURI, Strings.toString(_tokenId)));\\n    }\\n\\n    /**\\n     * @dev Sets the minter address\\n     * @param _minter The address that can mint token\\n     */\\n    function setMinter(address _minter) external onlyOwner {\\n        require(_minter != address(0), \\\"Zero address\\\");\\n        minter = _minter;\\n\\n        emit MinterUpdated(_minter);\\n    }\\n\\n    /**\\n     * @dev Sets the URI of the contract. it can be called\\n     * only once by the owner\\n     * @param _contractURI URI of the contract\\n     */\\n    function setContractURI(string calldata _contractURI) external onlyOwner {\\n        require(!(bytes(contractURI).length > 0), \\\"Contract URI is defined\\\");\\n\\n        contractURI = _contractURI;\\n\\n        emit ContractUriUpdated(_contractURI);\\n    }\\n\\n    /**\\n     * @dev Sets the URI of the token. it can be called\\n     * only once by the owner\\n     * @param _baseTokenURI URI of the token\\n     */\\n    function setBaseTokenURI(string calldata _baseTokenURI) external onlyOwner {\\n        require(!(bytes(baseTokenURI).length > 0), \\\"Base URI is defined\\\");\\n\\n        baseTokenURI = _baseTokenURI;\\n\\n        emit TokenUriUpdated(_baseTokenURI);\\n    }\\n\\n    /**\\n     * @dev Sets the address of the \\\"operator\\\" approved for all transactions.\\n     * May be set by the owner only.\\n     * @param approvee Approved address. It may be a Panther's contract or\\n     * OpenSea's ERC721 Proxy Registry, which is at\\n     * matic:0x58807baD0B376efc12F5AD86aAc70E78ed67deaE\\n     * (mumbai:0xff7Ca10aF37178BdD056628eF42fD7F799fAc77c)\\n     */\\n    function setApprovedForAllOperator(address approvee) external onlyOwner {\\n        // Zero address allowed (meaning \\\"no account is set\\\")\\n        // slither-disable-next-line missing-zero-check\\n        approvedForAll = approvee;\\n        emit ApprovedForAllUpdated(approvee);\\n    }\\n\\n    /**\\n     * @dev Mints a token to an address with a tokenURI.\\n     * @param _to address of the future owner of the token\\n     */\\n    function grantOneToken(address _to)\\n        external\\n        virtual\\n        returns (uint256 currentTokenId)\\n    {\\n        require(_msgSender() == minter, \\\"Only minter\\\");\\n\\n        currentTokenId = _nextTokenId.current();\\n        _nextTokenId.increment();\\n        _safeMint(_to, currentTokenId);\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist a Panther authorized account or\\n     * user's OpenSea proxy accounts to enable gas-less transactions/listings.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        if (super.isApprovedForAll(owner, operator)) return true;\\n\\n        // if \\\"approved for all\\\" operator (proxy registry) is detected, return true\\n        address approvee = approvedForAll;\\n        return (approvee != address(0)) && (approvee == operator);\\n    }\\n\\n    /**\\n     * This is used instead of msg.sender as transactions might be sent by a relayer rather than by a user directly.\\n     */\\n    function _msgSender() internal view override returns (address sender) {\\n        return ContextMixin.msgSender();\\n    }\\n}\\n\",\"keccak256\":\"0x5500971c799435393c909577c6783fdfc0f53d8bd6afcce0b5512f5817fdc345\",\"license\":\"MIT\"},\"contracts/staking/interfaces/INftGrantor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface INftGrantor {\\n    function grantOneToken(address to) external returns (uint256 tokenId);\\n}\\n\",\"keccak256\":\"0x8b9dfdc2e8e8e92a3c4c6f89d8e3b96a3b101e486a6368eba264983857bcecf1\",\"license\":\"MIT\"},\"contracts/staking/pNftToken/ContentMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line max-line-length\\n// Source: https://github.com/ProjectOpenSea/opensea-creatures/blob/master/contracts/common/meta-transactions/ContentMixin.sol\\n\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title ContextMixin contract\\n * @dev It supports gasless user transactions\\n */\\nabstract contract ContextMixin {\\n    function msgSender() internal view returns (address payable sender) {\\n        if (msg.sender == address(this)) {\\n            bytes memory array = msg.data;\\n            uint256 index = msg.data.length;\\n            // solhint-disable no-inline-assembly\\n            // slither-disable-next-line assembly\\n            assembly {\\n                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\\n                sender := and(\\n                    mload(add(array, index)),\\n                    0xffffffffffffffffffffffffffffffffffffffff\\n                )\\n            }\\n            // solhint-enable no-inline-assembly\\n        } else {\\n            sender = payable(msg.sender);\\n        }\\n        return sender;\\n    }\\n}\\n\",\"keccak256\":\"0x4bc218a55e22647dc2434c4a4208dec9ea6bcc6f35e61f42cb62f021e1f40c66\",\"license\":\"MIT\"},\"contracts/staking/pNftToken/EIP712Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line max-line-length\\n// Source: https://github.com/ProjectOpenSea/opensea-creatures/blob/master/contracts/common/meta-transactions/EIP712Base.sol\\n\\npragma solidity ^0.8.16;\\n\\nimport { Initializable } from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @title EIP712Base contract\\n */\\ncontract EIP712Base is Initializable {\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        address verifyingContract;\\n        bytes32 salt;\\n    }\\n\\n    string public constant ERC712_VERSION = \\\"1\\\";\\n\\n    bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"EIP712Domain(string name,string version,address verifyingContract,bytes32 salt)\\\"\\n            )\\n        );\\n    bytes32 internal domainSeperator;\\n\\n    // supposed to be called once while initializing.\\n    // one of the contracts that inherits this contract follows proxy pattern\\n    // so it is not possible to do this in a constructor\\n    function _initializeEIP712(string memory name) internal initializer {\\n        _setDomainSeperator(name);\\n    }\\n\\n    function _setDomainSeperator(string memory name) internal {\\n        domainSeperator = keccak256(\\n            abi.encode(\\n                EIP712_DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                keccak256(bytes(ERC712_VERSION)),\\n                address(this),\\n                bytes32(getChainId())\\n            )\\n        );\\n    }\\n\\n    function getDomainSeperator() public view returns (bytes32) {\\n        return domainSeperator;\\n    }\\n\\n    function getChainId() public view returns (uint256) {\\n        uint256 id;\\n\\n        // solhint-disable no-inline-assembly\\n        // slither-disable-next-line assembly\\n        assembly {\\n            id := chainid()\\n        }\\n        // solhint-enable no-inline-assembly\\n\\n        return id;\\n    }\\n\\n    /**\\n     * Accept message hash and returns hash message in EIP712 compatible form\\n     * So that it can be used to recover signer from signature signed using EIP712 formatted data\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * \\\"\\\\\\\\x19\\\" makes the encoding deterministic\\n     * \\\"\\\\\\\\x01\\\" is the version byte to make it compatible to EIP-191\\n     */\\n    function toTypedMessageHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeperator(), messageHash)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x879f748f3358d027bb36967160ba31a8411c8cb0e6f80edc30871d2e4fe16bcb\",\"license\":\"MIT\"},\"contracts/staking/pNftToken/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line max-line-length\\n// Source: https://github.com/ProjectOpenSea/opensea-creatures/blob/master/contracts/common/meta-transactions/Initializable.sol\\n\\npragma solidity ^0.8.16;\\n\\n/**\\n * @title Initializable contract\\n */\\ncontract Initializable {\\n    bool private inited = false;\\n\\n    modifier initializer() {\\n        require(!inited, \\\"already inited\\\");\\n        _;\\n        inited = true;\\n    }\\n}\\n\",\"keccak256\":\"0xe7f6519c1b6bd98bea53df5b1fb9774da75c6faa46aacbfdffb1e5cc5491c7e8\",\"license\":\"MIT\"},\"contracts/staking/pNftToken/NativeMetaTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line max-line-length\\n// Source: https://github.com/ProjectOpenSea/opensea-creatures/blob/master/contracts/common/meta-transactions/NativeMetaTransaction.sol\\n\\npragma solidity ^0.8.16;\\n\\nimport { EIP712Base } from \\\"./EIP712Base.sol\\\";\\n\\n/**\\n * @title NativeMetaTransaction contract\\n * @dev It enables gasless user transactions\\n */\\ncontract NativeMetaTransaction is EIP712Base {\\n    bytes32 private constant META_TRANSACTION_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                \\\"MetaTransaction(uint256 nonce,address from,bytes functionSignature)\\\"\\n            )\\n        );\\n    event MetaTransactionExecuted(\\n        address userAddress,\\n        address payable relayerAddress,\\n        bytes functionSignature\\n    );\\n    mapping(address => uint256) private nonces;\\n\\n    /*\\n     * Meta transaction structure.\\n     * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\\n     * He should call the desired function directly in that case.\\n     */\\n    struct MetaTransaction {\\n        uint256 nonce;\\n        address from;\\n        bytes functionSignature;\\n    }\\n\\n    // slither-disable-next-line locked-ether\\n    function executeMetaTransaction(\\n        address userAddress,\\n        bytes memory functionSignature,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) public payable returns (bytes memory) {\\n        MetaTransaction memory metaTx = MetaTransaction({\\n            nonce: nonces[userAddress],\\n            from: userAddress,\\n            functionSignature: functionSignature\\n        });\\n\\n        require(\\n            verify(userAddress, metaTx, sigR, sigS, sigV),\\n            \\\"Signer and signature do not match\\\"\\n        );\\n\\n        // increase nonce for user (to avoid re-use)\\n        nonces[userAddress] = nonces[userAddress] + 1;\\n\\n        emit MetaTransactionExecuted(\\n            userAddress,\\n            payable(msg.sender),\\n            functionSignature\\n        );\\n\\n        // Append userAddress and relayer address at the end to extract it from calling context\\n        // solhint-disable avoid-low-level-calls\\n        // slither-disable-next-line low-level-calls\\n        (bool success, bytes memory returnData) = address(this).call(\\n            abi.encodePacked(functionSignature, userAddress)\\n        );\\n        // solhint-enable avoid-low-level-calls\\n\\n        require(success, \\\"Function call not successful\\\");\\n\\n        return returnData;\\n    }\\n\\n    function hashMetaTransaction(MetaTransaction memory metaTx)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    META_TRANSACTION_TYPEHASH,\\n                    metaTx.nonce,\\n                    metaTx.from,\\n                    keccak256(metaTx.functionSignature)\\n                )\\n            );\\n    }\\n\\n    function getNonce(address user) public view returns (uint256 nonce) {\\n        nonce = nonces[user];\\n    }\\n\\n    function verify(\\n        address signer,\\n        MetaTransaction memory metaTx,\\n        bytes32 sigR,\\n        bytes32 sigS,\\n        uint8 sigV\\n    ) internal view returns (bool) {\\n        require(signer != address(0), \\\"NativeMetaTransaction: INVALID_SIGNER\\\");\\n        return\\n            signer ==\\n            ecrecover(\\n                toTypedMessageHash(hashMetaTransaction(metaTx)),\\n                sigV,\\n                sigR,\\n                sigS\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x67913e15b728251ab1d5c0288a80dca70be7b1fbd97cc8235f6181f792d01c90\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526006805460ff191690553480156200001b57600080fd5b50604051620029e9380380620029e98339810160408190526200003e91620002c5565b8181846001600160a01b0381166200009d5760405162461bcd60e51b815260206004820152601a60248201527f496d6d4f776e3a207a65726f206f776e6572206164647265737300000000000060448201526064015b60405180910390fd5b6001600160a01b03166080526000620000b78382620003de565b506001620000c68282620003de565b505050620000e06009620000f460201b6200127f1760201c565b620000eb82620000fd565b505050620004aa565b80546001019055565b60065460ff1615620001435760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481a5b9a5d195960921b604482015260640162000094565b6200014e816200015e565b506006805460ff19166001179055565b6040518060800160405280604f81526020016200299a604f9139805160209182012082519282019290922060408051808201825260018152603160f81b90840152805180840194909452838101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608401523060808401524660a0808501919091528151808503909101815260c090930190528151910120600755565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200022857600080fd5b81516001600160401b038082111562000245576200024562000200565b604051601f8301601f19908116603f0116810190828211818310171562000270576200027062000200565b816040528381526020925086838588010111156200028d57600080fd5b600091505b83821015620002b1578582018301518183018401529082019062000292565b600093810190920192909252949350505050565b600080600060608486031215620002db57600080fd5b83516001600160a01b0381168114620002f357600080fd5b60208501519093506001600160401b03808211156200031157600080fd5b6200031f8783880162000216565b935060408601519150808211156200033657600080fd5b50620003458682870162000216565b9150509250925092565b600181811c908216806200036457607f821691505b6020821081036200038557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003d957600081815260208120601f850160051c81016020861015620003b45750805b601f850160051c820191505b81811015620003d557828155600101620003c0565b5050505b505050565b81516001600160401b03811115620003fa57620003fa62000200565b62000412816200040b84546200034f565b846200038b565b602080601f8311600181146200044a5760008415620004315750858301515b600019600386901b1c1916600185901b178555620003d5565b600085815260208120601f198616915b828110156200047b578886015182559484019460019091019084016200045a565b50858210156200049a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6080516124b8620004e2600039600081816102ea01528181610ac701528181610d20015281816110aa015261116e01526124b86000f3fe6080604052600436106101c25760003560e01c806342842e0e116100f7578063b88d4fde11610095578063e8a3d48511610064578063e8a3d48514610517578063e985e9c51461052c578063fbd616d21461054c578063fca3b5aa1461056c57600080fd5b8063b88d4fde146104a2578063c87b56dd146104c2578063d17c93bf146104e2578063d547cfb71461050257600080fd5b8063938e3d7b116100d1578063938e3d7b1461042d57806395d89b411461044d578063a22cb46514610462578063b74c9c8c1461048257600080fd5b806342842e0e146103cd5780636352211e146103ed57806370a082311461040d57600080fd5b8063117803e31161016457806323b872dd1161013e57806323b872dd146103445780632d0335ab1461036457806330176e131461039a5780633408e470146103ba57600080fd5b8063117803e3146102d857806318160ddd1461030c57806320379ee51461032f57600080fd5b8063081812fc116101a0578063081812fc14610256578063095ea7b3146102765780630c53c51c146102985780630f7e5970146102ab57600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063075461721461021e575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611d3f565b61058c565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b506102116105de565b6040516101f39190611db3565b34801561022a57600080fd5b50600b5461023e906001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b34801561026257600080fd5b5061023e610271366004611dc6565b610670565b34801561028257600080fd5b50610296610291366004611df6565b61070a565b005b6102116102a6366004611ec3565b610831565b3480156102b757600080fd5b50610211604051806040016040528060018152602001603160f81b81525081565b3480156102e457600080fd5b5061023e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031857600080fd5b50610321610a1b565b6040519081526020016101f3565b34801561033b57600080fd5b50600754610321565b34801561035057600080fd5b5061029661035f366004611f3f565b610a37565b34801561037057600080fd5b5061032161037f366004611f7b565b6001600160a01b031660009081526008602052604090205490565b3480156103a657600080fd5b506102966103b5366004611f96565b610ac5565b3480156103c657600080fd5b5046610321565b3480156103d957600080fd5b506102966103e8366004611f3f565b610bde565b3480156103f957600080fd5b5061023e610408366004611dc6565b610bf9565b34801561041957600080fd5b50610321610428366004611f7b565b610c84565b34801561043957600080fd5b50610296610448366004611f96565b610d1e565b34801561045957600080fd5b50610211610e2b565b34801561046e57600080fd5b5061029661047d366004612008565b610e3a565b34801561048e57600080fd5b50600a5461023e906001600160a01b031681565b3480156104ae57600080fd5b506102966104bd366004612044565b610e50565b3480156104ce57600080fd5b506102116104dd366004611dc6565b610ee5565b3480156104ee57600080fd5b506103216104fd366004611f7b565b610f19565b34801561050e57600080fd5b50610211610fa1565b34801561052357600080fd5b5061021161102f565b34801561053857600080fd5b506101e76105473660046120ac565b61103c565b34801561055857600080fd5b50610296610567366004611f7b565b6110a8565b34801561057857600080fd5b50610296610587366004611f7b565b61116c565b60006001600160e01b031982166380ac58cd60e01b14806105bd57506001600160e01b03198216635b5e139f60e01b145b806105d857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546105ed906120df565b80601f0160208091040260200160405190810160405280929190818152602001828054610619906120df565b80156106665780601f1061063b57610100808354040283529160200191610666565b820191906000526020600020905b81548152906001019060200180831161064957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106ee5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061071582610bf9565b9050806001600160a01b0316836001600160a01b0316036107825760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106e5565b806001600160a01b0316610794611288565b6001600160a01b031614806107b057506107b081610547611288565b6108225760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106e5565b61082c8383611292565b505050565b60408051606081810183526001600160a01b0388166000818152600860209081529085902054845283015291810186905261086f8782878787611300565b6108c55760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084016106e5565b6001600160a01b0387166000908152600860205260409020546108e990600161212f565b6001600160a01b0388166000908152600860205260409081902091909155517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b9061093990899033908a90612142565b60405180910390a1600080306001600160a01b0316888a604051602001610961929190612177565b60408051601f198184030181529082905261097b916121ae565b6000604051808303816000865af19150503d80600081146109b8576040519150601f19603f3d011682016040523d82523d6000602084013e6109bd565b606091505b509150915081610a0f5760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c0000000060448201526064016106e5565b98975050505050505050565b60006001610a2860095490565b610a3291906121ca565b905090565b610a48610a42611288565b82611408565b610aba5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016106e5565b61082c8383836114d7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610b345760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016106e5565b6000600d8054610b43906120df565b90501115610b935760405162461bcd60e51b815260206004820152601360248201527f426173652055524920697320646566696e65640000000000000000000000000060448201526064016106e5565b600d610ba082848361222b565b507f89e5189514b6402e76dacf643a35960a8b0a3302552103511c83cb42b07b25ab8282604051610bd29291906122ec565b60405180910390a15050565b61082c83838360405180602001604052806000815250610e50565b6000818152600260205260408120546001600160a01b0316806105d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016106e5565b60006001600160a01b038216610d025760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016106e5565b506001600160a01b031660009081526003602052604090205490565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610d8d5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016106e5565b6000600c8054610d9c906120df565b90501115610dec5760405162461bcd60e51b815260206004820152601760248201527f436f6e74726163742055524920697320646566696e656400000000000000000060448201526064016106e5565b600c610df982848361222b565b507f4fe5dc42d3135f1187553067d4fc915fc201e7eaa6ef43dcc4929a2089772b4a8282604051610bd29291906122ec565b6060600180546105ed906120df565b610e4c610e45611288565b838361168b565b5050565b610e61610e5b611288565b83611408565b610ed35760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016106e5565b610edf84848484611759565b50505050565b6060600d610ef2836117d7565b604051602001610f0392919061231b565b6040516020818303038152906040529050919050565b600b546000906001600160a01b0316610f30611288565b6001600160a01b031614610f865760405162461bcd60e51b815260206004820152600b60248201527f4f6e6c79206d696e74657200000000000000000000000000000000000000000060448201526064016106e5565b506009805460018101909155610f9c82826118f0565b919050565b600d8054610fae906120df565b80601f0160208091040260200160405190810160405280929190818152602001828054610fda906120df565b80156110275780601f10610ffc57610100808354040283529160200191611027565b820191906000526020600020905b81548152906001019060200180831161100a57829003601f168201915b505050505081565b600c8054610fae906120df565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff1615611074575060016105d8565b600a546001600160a01b031680158015906110a05750826001600160a01b0316816001600160a01b0316145b949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146111175760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016106e5565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527fa03480b0bdd9936fc87365d0586f60fa5b1d691919b350634f74ce5bb34588fc906020015b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146111db5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016106e5565b6001600160a01b0381166112315760405162461bcd60e51b815260206004820152600c60248201527f5a65726f2061646472657373000000000000000000000000000000000000000060448201526064016106e5565b600b80546001600160a01b0319166001600160a01b0383169081179091556040519081527fad0f299ec81a386c98df0ac27dae11dd020ed1b56963c53a7292e7a3a314539a90602001611161565b80546001019055565b6000610a3261190a565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112c782610bf9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006001600160a01b03861661137e5760405162461bcd60e51b815260206004820152602560248201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360448201527f49474e455200000000000000000000000000000000000000000000000000000060648201526084016106e5565b600161139161138c87611966565b6119e3565b6040805160008152602081018083529290925260ff851690820152606081018690526080810185905260a0016020604051602081039080840390855afa1580156113df573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b6000818152600260205260408120546001600160a01b03166114815760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106e5565b600061148c83610bf9565b9050806001600160a01b0316846001600160a01b031614806114c75750836001600160a01b03166114bc84610670565b6001600160a01b0316145b806110a057506110a0818561103c565b826001600160a01b03166114ea82610bf9565b6001600160a01b0316146115665760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016106e5565b6001600160a01b0382166115c85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106e5565b6115d3600082611292565b6001600160a01b03831660009081526003602052604081208054600192906115fc9084906121ca565b90915550506001600160a01b038216600090815260036020526040812080546001929061162a90849061212f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b0316036116ec5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106e5565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6117648484846114d7565b61177084848484611a13565b610edf5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106e5565b6060816000036117fe5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156118285780611812816123a2565b91506118219050600a836123d1565b9150611802565b60008167ffffffffffffffff81111561184357611843611e20565b6040519080825280601f01601f19166020018201604052801561186d576020820181803683370190505b5090505b84156110a0576118826001836121ca565b915061188f600a866123e5565b61189a90603061212f565b60f81b8183815181106118af576118af6123f9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506118e9600a866123d1565b9450611871565b610e4c828260405180602001604052806000815250611b66565b600030330361196057600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506119639050565b50335b90565b600060405180608001604052806043815260200161246960439139805160209182012083518483015160408087015180519086012090516119c6950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b60006119ee60075490565b60405161190160f01b60208201526022810191909152604281018390526062016119c6565b60006001600160a01b0384163b15611b5b57836001600160a01b031663150b7a02611a3c611288565b8786866040518563ffffffff1660e01b8152600401611a5e949392919061240f565b6020604051808303816000875af1925050508015611a99575060408051601f3d908101601f19168201909252611a969181019061244b565b60015b611b41573d808015611ac7576040519150601f19603f3d011682016040523d82523d6000602084013e611acc565b606091505b508051600003611b395760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106e5565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506110a0565b506001949350505050565b611b708383611be4565b611b7d6000848484611a13565b61082c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106e5565b6001600160a01b038216611c3a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106e5565b6000818152600260205260409020546001600160a01b031615611c9f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106e5565b6001600160a01b0382166000908152600360205260408120805460019290611cc890849061212f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b031981168114611d3c57600080fd5b50565b600060208284031215611d5157600080fd5b8135611d5c81611d26565b9392505050565b60005b83811015611d7e578181015183820152602001611d66565b50506000910152565b60008151808452611d9f816020860160208601611d63565b601f01601f19169290920160200192915050565b602081526000611d5c6020830184611d87565b600060208284031215611dd857600080fd5b5035919050565b80356001600160a01b0381168114610f9c57600080fd5b60008060408385031215611e0957600080fd5b611e1283611ddf565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611e4757600080fd5b813567ffffffffffffffff80821115611e6257611e62611e20565b604051601f8301601f19908116603f01168101908282118183101715611e8a57611e8a611e20565b81604052838152866020858801011115611ea357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215611edb57600080fd5b611ee486611ddf565b9450602086013567ffffffffffffffff811115611f0057600080fd5b611f0c88828901611e36565b9450506040860135925060608601359150608086013560ff81168114611f3157600080fd5b809150509295509295909350565b600080600060608486031215611f5457600080fd5b611f5d84611ddf565b9250611f6b60208501611ddf565b9150604084013590509250925092565b600060208284031215611f8d57600080fd5b611d5c82611ddf565b60008060208385031215611fa957600080fd5b823567ffffffffffffffff80821115611fc157600080fd5b818501915085601f830112611fd557600080fd5b813581811115611fe457600080fd5b866020828501011115611ff657600080fd5b60209290920196919550909350505050565b6000806040838503121561201b57600080fd5b61202483611ddf565b91506020830135801515811461203957600080fd5b809150509250929050565b6000806000806080858703121561205a57600080fd5b61206385611ddf565b935061207160208601611ddf565b925060408501359150606085013567ffffffffffffffff81111561209457600080fd5b6120a087828801611e36565b91505092959194509250565b600080604083850312156120bf57600080fd5b6120c883611ddf565b91506120d660208401611ddf565b90509250929050565b600181811c908216806120f357607f821691505b60208210810361211357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105d8576105d8612119565b60006001600160a01b0380861683528085166020840152506060604083015261216e6060830184611d87565b95945050505050565b60008351612189818460208801611d63565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b600082516121c0818460208701611d63565b9190910192915050565b818103818111156105d8576105d8612119565b601f82111561082c57600081815260208120601f850160051c810160208610156122045750805b601f850160051c820191505b8181101561222357828155600101612210565b505050505050565b67ffffffffffffffff83111561224357612243611e20565b6122578361225183546120df565b836121dd565b6000601f84116001811461228b57600085156122735750838201355b600019600387901b1c1916600186901b1783556122e5565b600083815260209020601f19861690835b828110156122bc578685013582556020948501946001909201910161229c565b50868210156122d95760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6000808454612329816120df565b60018281168015612341576001811461235657612385565b60ff1984168752821515830287019450612385565b8860005260208060002060005b8581101561237c5781548a820152908401908201612363565b50505082870194505b505050508351612399818360208801611d63565b01949350505050565b6000600182016123b4576123b4612119565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826123e0576123e06123bb565b500490565b6000826123f4576123f46123bb565b500690565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b038087168352808616602084015250836040830152608060608301526124416080830184611d87565b9695505050505050565b60006020828403121561245d57600080fd5b8151611d5c81611d2656fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a164736f6c6343000810000a454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c806342842e0e116100f7578063b88d4fde11610095578063e8a3d48511610064578063e8a3d48514610517578063e985e9c51461052c578063fbd616d21461054c578063fca3b5aa1461056c57600080fd5b8063b88d4fde146104a2578063c87b56dd146104c2578063d17c93bf146104e2578063d547cfb71461050257600080fd5b8063938e3d7b116100d1578063938e3d7b1461042d57806395d89b411461044d578063a22cb46514610462578063b74c9c8c1461048257600080fd5b806342842e0e146103cd5780636352211e146103ed57806370a082311461040d57600080fd5b8063117803e31161016457806323b872dd1161013e57806323b872dd146103445780632d0335ab1461036457806330176e131461039a5780633408e470146103ba57600080fd5b8063117803e3146102d857806318160ddd1461030c57806320379ee51461032f57600080fd5b8063081812fc116101a0578063081812fc14610256578063095ea7b3146102765780630c53c51c146102985780630f7e5970146102ab57600080fd5b806301ffc9a7146101c757806306fdde03146101fc578063075461721461021e575b600080fd5b3480156101d357600080fd5b506101e76101e2366004611d3f565b61058c565b60405190151581526020015b60405180910390f35b34801561020857600080fd5b506102116105de565b6040516101f39190611db3565b34801561022a57600080fd5b50600b5461023e906001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b34801561026257600080fd5b5061023e610271366004611dc6565b610670565b34801561028257600080fd5b50610296610291366004611df6565b61070a565b005b6102116102a6366004611ec3565b610831565b3480156102b757600080fd5b50610211604051806040016040528060018152602001603160f81b81525081565b3480156102e457600080fd5b5061023e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031857600080fd5b50610321610a1b565b6040519081526020016101f3565b34801561033b57600080fd5b50600754610321565b34801561035057600080fd5b5061029661035f366004611f3f565b610a37565b34801561037057600080fd5b5061032161037f366004611f7b565b6001600160a01b031660009081526008602052604090205490565b3480156103a657600080fd5b506102966103b5366004611f96565b610ac5565b3480156103c657600080fd5b5046610321565b3480156103d957600080fd5b506102966103e8366004611f3f565b610bde565b3480156103f957600080fd5b5061023e610408366004611dc6565b610bf9565b34801561041957600080fd5b50610321610428366004611f7b565b610c84565b34801561043957600080fd5b50610296610448366004611f96565b610d1e565b34801561045957600080fd5b50610211610e2b565b34801561046e57600080fd5b5061029661047d366004612008565b610e3a565b34801561048e57600080fd5b50600a5461023e906001600160a01b031681565b3480156104ae57600080fd5b506102966104bd366004612044565b610e50565b3480156104ce57600080fd5b506102116104dd366004611dc6565b610ee5565b3480156104ee57600080fd5b506103216104fd366004611f7b565b610f19565b34801561050e57600080fd5b50610211610fa1565b34801561052357600080fd5b5061021161102f565b34801561053857600080fd5b506101e76105473660046120ac565b61103c565b34801561055857600080fd5b50610296610567366004611f7b565b6110a8565b34801561057857600080fd5b50610296610587366004611f7b565b61116c565b60006001600160e01b031982166380ac58cd60e01b14806105bd57506001600160e01b03198216635b5e139f60e01b145b806105d857506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546105ed906120df565b80601f0160208091040260200160405190810160405280929190818152602001828054610619906120df565b80156106665780601f1061063b57610100808354040283529160200191610666565b820191906000526020600020905b81548152906001019060200180831161064957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106ee5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061071582610bf9565b9050806001600160a01b0316836001600160a01b0316036107825760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106e5565b806001600160a01b0316610794611288565b6001600160a01b031614806107b057506107b081610547611288565b6108225760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106e5565b61082c8383611292565b505050565b60408051606081810183526001600160a01b0388166000818152600860209081529085902054845283015291810186905261086f8782878787611300565b6108c55760405162461bcd60e51b815260206004820152602160248201527f5369676e657220616e64207369676e617475726520646f206e6f74206d6174636044820152600d60fb1b60648201526084016106e5565b6001600160a01b0387166000908152600860205260409020546108e990600161212f565b6001600160a01b0388166000908152600860205260409081902091909155517f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b9061093990899033908a90612142565b60405180910390a1600080306001600160a01b0316888a604051602001610961929190612177565b60408051601f198184030181529082905261097b916121ae565b6000604051808303816000865af19150503d80600081146109b8576040519150601f19603f3d011682016040523d82523d6000602084013e6109bd565b606091505b509150915081610a0f5760405162461bcd60e51b815260206004820152601c60248201527f46756e6374696f6e2063616c6c206e6f74207375636365737366756c0000000060448201526064016106e5565b98975050505050505050565b60006001610a2860095490565b610a3291906121ca565b905090565b610a48610a42611288565b82611408565b610aba5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016106e5565b61082c8383836114d7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610b345760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016106e5565b6000600d8054610b43906120df565b90501115610b935760405162461bcd60e51b815260206004820152601360248201527f426173652055524920697320646566696e65640000000000000000000000000060448201526064016106e5565b600d610ba082848361222b565b507f89e5189514b6402e76dacf643a35960a8b0a3302552103511c83cb42b07b25ab8282604051610bd29291906122ec565b60405180910390a15050565b61082c83838360405180602001604052806000815250610e50565b6000818152600260205260408120546001600160a01b0316806105d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016106e5565b60006001600160a01b038216610d025760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016106e5565b506001600160a01b031660009081526003602052604090205490565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314610d8d5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016106e5565b6000600c8054610d9c906120df565b90501115610dec5760405162461bcd60e51b815260206004820152601760248201527f436f6e74726163742055524920697320646566696e656400000000000000000060448201526064016106e5565b600c610df982848361222b565b507f4fe5dc42d3135f1187553067d4fc915fc201e7eaa6ef43dcc4929a2089772b4a8282604051610bd29291906122ec565b6060600180546105ed906120df565b610e4c610e45611288565b838361168b565b5050565b610e61610e5b611288565b83611408565b610ed35760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016106e5565b610edf84848484611759565b50505050565b6060600d610ef2836117d7565b604051602001610f0392919061231b565b6040516020818303038152906040529050919050565b600b546000906001600160a01b0316610f30611288565b6001600160a01b031614610f865760405162461bcd60e51b815260206004820152600b60248201527f4f6e6c79206d696e74657200000000000000000000000000000000000000000060448201526064016106e5565b506009805460018101909155610f9c82826118f0565b919050565b600d8054610fae906120df565b80601f0160208091040260200160405190810160405280929190818152602001828054610fda906120df565b80156110275780601f10610ffc57610100808354040283529160200191611027565b820191906000526020600020905b81548152906001019060200180831161100a57829003601f168201915b505050505081565b600c8054610fae906120df565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff1615611074575060016105d8565b600a546001600160a01b031680158015906110a05750826001600160a01b0316816001600160a01b0316145b949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146111175760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016106e5565b600a80546001600160a01b0319166001600160a01b0383169081179091556040519081527fa03480b0bdd9936fc87365d0586f60fa5b1d691919b350634f74ce5bb34588fc906020015b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633146111db5760405162461bcd60e51b8152602060048201526014602482015273125b5b53dddb8e881d5b985d5d1a1bdc9a5e995960621b60448201526064016106e5565b6001600160a01b0381166112315760405162461bcd60e51b815260206004820152600c60248201527f5a65726f2061646472657373000000000000000000000000000000000000000060448201526064016106e5565b600b80546001600160a01b0319166001600160a01b0383169081179091556040519081527fad0f299ec81a386c98df0ac27dae11dd020ed1b56963c53a7292e7a3a314539a90602001611161565b80546001019055565b6000610a3261190a565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112c782610bf9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006001600160a01b03861661137e5760405162461bcd60e51b815260206004820152602560248201527f4e61746976654d6574615472616e73616374696f6e3a20494e56414c49445f5360448201527f49474e455200000000000000000000000000000000000000000000000000000060648201526084016106e5565b600161139161138c87611966565b6119e3565b6040805160008152602081018083529290925260ff851690820152606081018690526080810185905260a0016020604051602081039080840390855afa1580156113df573d6000803e3d6000fd5b505050602060405103516001600160a01b0316866001600160a01b031614905095945050505050565b6000818152600260205260408120546001600160a01b03166114815760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106e5565b600061148c83610bf9565b9050806001600160a01b0316846001600160a01b031614806114c75750836001600160a01b03166114bc84610670565b6001600160a01b0316145b806110a057506110a0818561103c565b826001600160a01b03166114ea82610bf9565b6001600160a01b0316146115665760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201527f73206e6f74206f776e000000000000000000000000000000000000000000000060648201526084016106e5565b6001600160a01b0382166115c85760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106e5565b6115d3600082611292565b6001600160a01b03831660009081526003602052604081208054600192906115fc9084906121ca565b90915550506001600160a01b038216600090815260036020526040812080546001929061162a90849061212f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b0316036116ec5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106e5565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6117648484846114d7565b61177084848484611a13565b610edf5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106e5565b6060816000036117fe5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156118285780611812816123a2565b91506118219050600a836123d1565b9150611802565b60008167ffffffffffffffff81111561184357611843611e20565b6040519080825280601f01601f19166020018201604052801561186d576020820181803683370190505b5090505b84156110a0576118826001836121ca565b915061188f600a866123e5565b61189a90603061212f565b60f81b8183815181106118af576118af6123f9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506118e9600a866123d1565b9450611871565b610e4c828260405180602001604052806000815250611b66565b600030330361196057600080368080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050503601516001600160a01b031691506119639050565b50335b90565b600060405180608001604052806043815260200161246960439139805160209182012083518483015160408087015180519086012090516119c6950193845260208401929092526001600160a01b03166040830152606082015260800190565b604051602081830303815290604052805190602001209050919050565b60006119ee60075490565b60405161190160f01b60208201526022810191909152604281018390526062016119c6565b60006001600160a01b0384163b15611b5b57836001600160a01b031663150b7a02611a3c611288565b8786866040518563ffffffff1660e01b8152600401611a5e949392919061240f565b6020604051808303816000875af1925050508015611a99575060408051601f3d908101601f19168201909252611a969181019061244b565b60015b611b41573d808015611ac7576040519150601f19603f3d011682016040523d82523d6000602084013e611acc565b606091505b508051600003611b395760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106e5565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506110a0565b506001949350505050565b611b708383611be4565b611b7d6000848484611a13565b61082c5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106e5565b6001600160a01b038216611c3a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106e5565b6000818152600260205260409020546001600160a01b031615611c9f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106e5565b6001600160a01b0382166000908152600360205260408120805460019290611cc890849061212f565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b031981168114611d3c57600080fd5b50565b600060208284031215611d5157600080fd5b8135611d5c81611d26565b9392505050565b60005b83811015611d7e578181015183820152602001611d66565b50506000910152565b60008151808452611d9f816020860160208601611d63565b601f01601f19169290920160200192915050565b602081526000611d5c6020830184611d87565b600060208284031215611dd857600080fd5b5035919050565b80356001600160a01b0381168114610f9c57600080fd5b60008060408385031215611e0957600080fd5b611e1283611ddf565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611e4757600080fd5b813567ffffffffffffffff80821115611e6257611e62611e20565b604051601f8301601f19908116603f01168101908282118183101715611e8a57611e8a611e20565b81604052838152866020858801011115611ea357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215611edb57600080fd5b611ee486611ddf565b9450602086013567ffffffffffffffff811115611f0057600080fd5b611f0c88828901611e36565b9450506040860135925060608601359150608086013560ff81168114611f3157600080fd5b809150509295509295909350565b600080600060608486031215611f5457600080fd5b611f5d84611ddf565b9250611f6b60208501611ddf565b9150604084013590509250925092565b600060208284031215611f8d57600080fd5b611d5c82611ddf565b60008060208385031215611fa957600080fd5b823567ffffffffffffffff80821115611fc157600080fd5b818501915085601f830112611fd557600080fd5b813581811115611fe457600080fd5b866020828501011115611ff657600080fd5b60209290920196919550909350505050565b6000806040838503121561201b57600080fd5b61202483611ddf565b91506020830135801515811461203957600080fd5b809150509250929050565b6000806000806080858703121561205a57600080fd5b61206385611ddf565b935061207160208601611ddf565b925060408501359150606085013567ffffffffffffffff81111561209457600080fd5b6120a087828801611e36565b91505092959194509250565b600080604083850312156120bf57600080fd5b6120c883611ddf565b91506120d660208401611ddf565b90509250929050565b600181811c908216806120f357607f821691505b60208210810361211357634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156105d8576105d8612119565b60006001600160a01b0380861683528085166020840152506060604083015261216e6060830184611d87565b95945050505050565b60008351612189818460208801611d63565b60609390931b6bffffffffffffffffffffffff19169190920190815260140192915050565b600082516121c0818460208701611d63565b9190910192915050565b818103818111156105d8576105d8612119565b601f82111561082c57600081815260208120601f850160051c810160208610156122045750805b601f850160051c820191505b8181101561222357828155600101612210565b505050505050565b67ffffffffffffffff83111561224357612243611e20565b6122578361225183546120df565b836121dd565b6000601f84116001811461228b57600085156122735750838201355b600019600387901b1c1916600186901b1783556122e5565b600083815260209020601f19861690835b828110156122bc578685013582556020948501946001909201910161229c565b50868210156122d95760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6000808454612329816120df565b60018281168015612341576001811461235657612385565b60ff1984168752821515830287019450612385565b8860005260208060002060005b8581101561237c5781548a820152908401908201612363565b50505082870194505b505050508351612399818360208801611d63565b01949350505050565b6000600182016123b4576123b4612119565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826123e0576123e06123bb565b500490565b6000826123f4576123f46123bb565b500690565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b038087168352808616602084015250836040830152608060608301526124416080830184611d87565b9695505050505050565b60006020828403121561245d57600080fd5b8151611d5c81611d2656fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a164736f6c6343000810000a",
  "devdoc": {
    "details": "If called by the \"minter\", it mints and grants one NFT to the address given. The `AdvancedStakeRewardController` is supposed to be the minter and call it to reward stakers with $PNFTs. An immutable \"owner\" may update the minter and set the metadata (URIs) once. Inspired and borrowed by/from the OpenSea's ERC721Tradable contract. https://github.com/ProjectOpenSea/opensea-creatures/blob/master/contracts/ERC721Tradable.sol",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "grantOneToken(address)": {
        "details": "Mints a token to an address with a tokenURI.",
        "params": {
          "_to": "address of the future owner of the token"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setApprovedForAllOperator(address)": {
        "details": "Sets the address of the \"operator\" approved for all transactions. May be set by the owner only.",
        "params": {
          "approvee": "Approved address. It may be a Panther's contract or OpenSea's ERC721 Proxy Registry, which is at matic:0x58807baD0B376efc12F5AD86aAc70E78ed67deaE (mumbai:0xff7Ca10aF37178BdD056628eF42fD7F799fAc77c)"
        }
      },
      "setBaseTokenURI(string)": {
        "details": "Sets the URI of the token. it can be called only once by the owner",
        "params": {
          "_baseTokenURI": "URI of the token"
        }
      },
      "setContractURI(string)": {
        "details": "Sets the URI of the contract. it can be called only once by the owner",
        "params": {
          "_contractURI": "URI of the contract"
        }
      },
      "setMinter(address)": {
        "details": "Sets the minter address",
        "params": {
          "_minter": "The address that can mint token"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "totalSupply()": {
        "details": "Returns the total tokens minted so far. 1 is always subtracted from the Counter since it tracks the next available tokenId."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "title": "PNftToken",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OWNER()": {
        "notice": "The owner who has privileged rights"
      },
      "approvedForAll()": {
        "notice": "Operator (or user's Proxy Register) approved for all transactions"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist a Panther authorized account or user's OpenSea proxy accounts to enable gas-less transactions/listings."
      }
    },
    "notice": "Panther NFT (PNFT) token on Polygon.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1225,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1227,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1231,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1235,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1239,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1245,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 14149,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "inited",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 14055,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "domainSeperator",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 14191,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11160,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "_nextTokenId",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Counter)2516_storage"
      },
      {
        "astId": 11163,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "approvedForAll",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 11165,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "minter",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 11167,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "contractURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 11169,
        "contract": "contracts/staking/PNftToken.sol:PNftToken",
        "label": "baseTokenURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2516_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2515,
            "contract": "contracts/staking/PNftToken.sol:PNftToken",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}